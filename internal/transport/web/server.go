package web

import (
	"context"
	"log"
	"net/http"
	"time"

	"github.com/EgorLis/my-subs/internal/config"
	_ "github.com/EgorLis/my-subs/internal/docs" // docs generated by Swag CLI
	"github.com/EgorLis/my-subs/internal/domain"
	"github.com/EgorLis/my-subs/internal/transport/web/v1/health"
	"github.com/EgorLis/my-subs/internal/transport/web/v1/subscription"
	httpSwagger "github.com/swaggo/http-swagger"
)

type Server struct {
	log    *log.Logger
	server *http.Server
	cfg    *config.Config
}

func New(logger *log.Logger, cfg *config.Config, repo domain.SubscriptionRepository) *Server {
	healthLog := log.New(logger.Writer(), logger.Prefix()+"[health] ", logger.Flags())
	subLog := log.New(logger.Writer(), logger.Prefix()+"[subscriptions] ", logger.Flags())
	healthHandler := &health.Handler{DBPinger: repo, Log: healthLog}
	subHandler := &subscription.Handler{Repo: repo, Log: subLog}
	srv := &http.Server{
		Addr:              cfg.AppPort,
		Handler:           newRouter(healthHandler, subHandler, logger),
		ReadTimeout:       10 * time.Second,
		WriteTimeout:      10 * time.Second,
		MaxHeaderBytes:    1 << 20,
		ReadHeaderTimeout: 2 * time.Second,
		IdleTimeout:       60 * time.Second,
	}
	return &Server{server: srv, cfg: cfg, log: logger}
}

func (ws *Server) Run() {
	ws.log.Printf("started on %s", ws.server.Addr)
	if err := ws.server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		ws.log.Fatalf("error: %v", err)
	}
}

func (ws *Server) Close(ctx context.Context) {
	if err := ws.server.Shutdown(ctx); err != nil {
		ws.log.Printf("forced to shutdown: %v", err)
	}

	ws.log.Println("exited gracefully")
}

func newRouter(hh *health.Handler, sh *subscription.Handler, log *log.Logger) http.Handler {
	mux := http.NewServeMux()

	// health
	mux.HandleFunc("GET /v1/healthz", hh.Liveness)
	mux.HandleFunc("GET /v1/readyz", hh.Readiness)

	// subscriptions CRUDL
	mux.HandleFunc("POST /v1/subscriptions", limitBody(16<<10, sh.Create))     // 16 KB
	mux.HandleFunc("GET /v1/subscriptions", sh.List)                           // 16 KB
	mux.HandleFunc("PUT /v1/subscriptions/{id}", limitBody(16<<10, sh.Update)) // 16 KB
	mux.HandleFunc("DELETE /v1/subscriptions/{id}", sh.Delete)
	mux.HandleFunc("GET /v1/subscriptions/{id}", sh.Get)

	// total cost
	mux.HandleFunc("GET /v1/subscriptions/totalcost", sh.TotalCost)

	// swagger
	mux.Handle("GET /swagger/", httpSwagger.WrapHandler)

	loggedMux := loggingMiddleware(mux, log)

	return loggedMux
}

func limitBody(n int64, h http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		r.Body = http.MaxBytesReader(w, r.Body, n)
		h(w, r)
	}
}
